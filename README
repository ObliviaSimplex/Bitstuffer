 ___ _ _      _         __  __
| _ |_) |_ __| |_ _  _ / _|/ _|___ _ _
| _ \ |  _(_-<  _| || |  _|  _/ -_) '_|
|___/_|\__/__/\__|\_,_|_| |_| \___|_|
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Olivia Lucca Fraser         
October 16, 2015

Bitstuffer is a simple command-line utility whose sole purpose is
inserting 0-bits into a bitstream after every n consecutive 1-bits,
and then detecting and unstuffing those same bits (or other bits,
should the user desire) at some other time (typically, on the
receiving end of a transmission that stuffs before sending). It can
read input from both files and from stdin, making it easy to chain two
or more instances of Bitstuffer together.

This feature makes it easy to test the Bitstuffer's fidelity. The Unix
command

./bitstuffer -sqcp 5 -f sample.txt | ./bitstuffer -uqcp 5 -f -

will load sample.txt into memory as a byte array, bit-stuff (-s) that
bytearray by inserting a 0-bit after every series of 5 consecutive 1s
(as specified by the option -p 5), and then output the result as raw
bytes (using the %c format string specifier, as specified by -c). This
will then pass through a Unix pipe to the second instance of
bitstuffer, which has been instructed to unstuff (-u) the input that
it reads from stdin (-f -), which is returns in raw byte format (as
characters). Verbose output has been turned off for each instance with
the -q flag. If you want to take a look at this output, you can switch
it on with -v, and it will be sent to stderr (so as not to clog the
pipe). But it really is *quite* verbose, and so is not recommended
unless the input size is quite small. For something like

echo hello | ./bitstuffer -svcp 5 -f - | ./bitstuff uvcp 5 -f -

it may be interesting to look at, as it includes a display of the
bitstream and highlighting of the stuffed bits.

Bitstuffer writes to stdout by default. If you want to write a
bitstuffed bytearray to a file, the best way is to just use output
redirection, like so

./bitstuffer -svcp 5 -f sample.txt > sample.stf

Bitstuffer can also output its bytearrays in hexidecimal and binary
notation. To achieve this, try

./bitstuffer -sqxp 5 -f sample.txt

for hex, or

./bitstuffer -sqbp 5 -f sample.txt

for binary notation.

Many of these command line options have default settings, for ease of
use (for example, Bitstuffer expects input from stdin, unless told
otherwise). For details, run ./bitstuffer -h.

To compile
----------
gcc bitstuffer.c -o bitstuffer


Note:
=====

Readable text actually offers a poor test case for a 5-bit bitstuffer
(5-bit bitstuffers being the canonical sort). This is because the
ASCII character set is actually quite poor in 11111-sequences. This can
be verified quickly with a bit of python:

for i in range(0xff):
  if "11111" in bin(i):
    print hex(i), "=", chr(i)

This gives us a pretty slim set of readable characters: >?+|}~, to be
precise. The sample text that was distributed with this assignment has
none of these characters:

$ cat sample.txt | tr -dc ">?+|}~" | wc -c
0

Could adjacent bytes be a source of 11111-sequences in a bitstream,
then? If the bytes are all printable ASCII characters, then this isn't
going to make a difference. Every standard, printable ASCII character
has a leading zero (they are all less than 128, or are the "positive"
bytes, if you're thinking of them in terms of signed chars).

The bitstuffer is therefore best tested with either a smaller
bitstuffing interval (the "period" parameter) or with raw binary
bitstreams. This is where the hexidecimal and binary output formats in
Bitstuffer come in handy.

A better test might be:

$ echo -en "\xff\xff\fa Hello, world. \xff\xff" > test.case

$ ./bitstuff -sbp 0 -f test.case > test.out.1

## -p 0 turns off bitstuffing ##

$ ./bitstuff -scp 5 -f test.case | ./bitstuff -ubp 5 > test.out.2

$ diff test.out.1 test.out.2

Reducing the period size to 4 works well for ASCII files as well.
(Reducing it to 3 seems to cause a bit of trouble, probably due to
unsanitized input. Something is getting fuzzed and should be
debugged.)

  ___ ___  ___   _   _ _   _ _ _ _
 / __| _ \/ __| | | | | |_(_) (_) |_ _  _
| (__|   / (__  | |_| |  _| | | |  _| || |
 \___|_|_\\___|  \___/ \__|_|_|_|\__|\_, |
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=|__/-=

Olivia Lucca Fraser
October 25, 2015

This is a straightforward implementation of the shift-register
algorithm for computing cyclic redundancy checks on bitstreams.

An automated series of tests can be run using the bash script,
crc-experiment.sh, or the utility can be played with directly.
The utility admits a variety of command line options, which are
detailed in the help menu:

CRC UTILITY
=-=-=-=-=-=
Usage: ./CRC [OPTIONS]
-v: verbose
-q: quiet (diable verbose output)
-f <filename>: supply file as input, instead of stdin
-f - : read from stdin (default)
-s: execute send phase only; append remainder, but do not check
-r: execute receive phase only; check for remainder, but don't append
-b: read input as binary string of ASCII '0's and '1's
-c: read input as raw characters [default]
-o: output bitstring only: use with -b to chain CRC pipes together
-e <burst length>: introduce burst error of <burst length> bits
-g <generator>: supply alternate CRC polynomial in hex or decimal
-h: display this help menu.


Input can be provided as either a stream of raw characters (using
the -c flag, which is also the default setting), or binary notation
(using the -b flag) -- i.e., a series of ASCII '0's and '1's (bytes
0x30 and 0x31, not 0x00 and 0x01). 

A burst error can be introduced using the -e flag, and an integer
argument.

The default generator is 0x04C11DB7, which is commonly used in
CRC-32 applications. Other generators can be substituted for this
one, using the -g flag, and a numerical argument (in either decimal
or hexidecimal notation). 

The -s and -r flags can be used to separate the send and receive
functionality of the CRC programme. This can be useful for performing
CRC calculations as needed (see 3ab.txt for some examples), or
chaining instances of CRC together with Unix pipes.

For example:

$ echo 101101101 | ./CRC -sbog 0xb | ./CRC -rbvg 0xb

MESSAGE READ: m	
IN BINARY:    101101101001
XORPLATE:     11
[01] SHIFTREG: 001  FED: 1  
[02] SHIFTREG: 010  FED: 0  
[03] SHIFTREG: 101  FED: 1  
[04] SHIFTREG: 000  FED: 1  XOR EVENT
[05] SHIFTREG: 000  FED: 0  
[06] SHIFTREG: 001  FED: 1  
[07] SHIFTREG: 011  FED: 1  
[08] SHIFTREG: 110  FED: 0  
[09] SHIFTREG: 110  FED: 1  XOR EVENT
[10] SHIFTREG: 111  FED: 0  XOR EVENT
[11] SHIFTREG: 101  FED: 0  XOR EVENT
[12] SHIFTREG: 000  FED: 1  XOR EVENT
[13] SHIFTREG: 000  FED: 0  
[14] SHIFTREG: 000  FED: 0  
[15] SHIFTREG: 000  FED: 0  
IN:  101101101001
OUT: 101101101001

NO CORRUPTION DETECTED.

This is essentially the same as performing both calculations inside
one instance of CRC with the following command:

$ echo 101101101 | ./CRC -bg 0xb

MESSAGE READ: m
IN BINARY:    101101101
XORPLATE:     11
[01] SHIFTREG: 001  FED: 1  
[02] SHIFTREG: 010  FED: 0  
[03] SHIFTREG: 101  FED: 1  
[04] SHIFTREG: 000  FED: 1  XOR EVENT
[05] SHIFTREG: 000  FED: 0  
[06] SHIFTREG: 001  FED: 1  
[07] SHIFTREG: 011  FED: 1  
[08] SHIFTREG: 110  FED: 0  
[09] SHIFTREG: 110  FED: 1  XOR EVENT
[10] SHIFTREG: 111  FED: 0  XOR EVENT
[11] SHIFTREG: 101  FED: 0  XOR EVENT
[12] SHIFTREG: 001  FED: 0  XOR EVENT
(2) copying 0 from shiftreg to bitmsg_out bit #9
(1) copying 0 from shiftreg to bitmsg_out bit #10
(0) copying 1 from shiftreg to bitmsg_out bit #11
IN:  101101101
OUT: 101101101001

XORPLATE:     11
[01] SHIFTREG: 001  FED: 1  
[02] SHIFTREG: 010  FED: 0  
[03] SHIFTREG: 101  FED: 1  
[04] SHIFTREG: 000  FED: 1  XOR EVENT
[05] SHIFTREG: 000  FED: 0  
[06] SHIFTREG: 001  FED: 1  
[07] SHIFTREG: 011  FED: 1  
[08] SHIFTREG: 110  FED: 0  
[09] SHIFTREG: 110  FED: 1  XOR EVENT
[10] SHIFTREG: 111  FED: 0  XOR EVENT
[11] SHIFTREG: 101  FED: 0  XOR EVENT
[12] SHIFTREG: 000  FED: 1  XOR EVENT
[13] SHIFTREG: 000  FED: 0  
[14] SHIFTREG: 000  FED: 0  
[15] SHIFTREG: 000  FED: 0  
IN:  101101101001
OUT: 101101101001

NO CORRUPTION DETECTED.






